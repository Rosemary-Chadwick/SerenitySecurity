const baseUrl = "/api/vulnerability";

export const getVulnerabilityById = (id) => {
  return fetch(`${baseUrl}/${id}`).then((res) => {
    if (res.ok) {
      return res.json();
    } else {
      return res.text().then((text) => {
        throw new Error(`Failed to fetch vulnerability: ${text}`);
      });
    }
  });
};

export const searchVulnerabilities = (keyword) => {
  return fetch(`${baseUrl}/search?keyword=${encodeURIComponent(keyword)}`).then(
    (res) => {
      if (res.ok) {
        return res.json();
      } else {
        return res.text().then((text) => {
          throw new Error(`Error searching vulnerabilities: ${text}`);
        });
      }
    }
  );
};

export const scanAssetForVulnerabilities = (assetId) => {
  console.log(`Scanning asset ID: ${assetId}`);

  return fetch(`${baseUrl}/scan/${assetId}`, {
    method: "GET",
    headers: {
      Accept: "application/json",
    },
  }).then((res) => {
    if (res.ok) {
      return res.json();
    } else {
      return res.text().then((text) => {
        console.error(`Scan error: ${text}`);
        throw new Error(`Error scanning: ${text}`);
      });
    }
  });
};

export const toggleRemediationItem = (remediationId, isCompleted) => {
  return fetch(`/api/remediation/${remediationId}/toggle`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ isCompleted }),
  }).then((res) => {
    if (res.ok) {
      return res.json();
    } else {
      return res.text().then((text) => {
        throw new Error(`Failed to update remediation: ${text}`);
      });
    }
  });
};

export const generateRemediationSteps = (
  vulnerabilityId,
  forceRegenerate = true
) => {
  return fetch(
    `/api/vulnerability/generate-remediation/${vulnerabilityId}?forceRegenerate=${forceRegenerate}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    }
  ).then((res) => {
    if (res.ok) {
      return res.json();
    } else {
      throw new Error("Failed to generate remediation steps");
    }
  });
};
