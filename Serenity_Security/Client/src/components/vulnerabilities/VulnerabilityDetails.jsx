import React, { useEffect, useState } from "react";
import { useParams, useNavigate, Link, useLocation } from "react-router-dom";
import { generateRemediationSteps, getVulnerabilityById, toggleRemediationItem } from "../../managers/vulnerabilityManager";

export const VulnerabilityDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const [vulnerability, setVulnerability] = useState(null);
  const [remediationSteps, setRemediationSteps] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [updating, setUpdating] = useState(false);
  const [notification, setNotification] = useState({ show: false, message: "", type: "success" });

  const getReportId = () => {
    const searchParams = new URLSearchParams(location.search);
    return searchParams.get('reportId');
  };

  useEffect(() => {
    getVulnerabilityById(id)
      .then((data) => {
        setVulnerability(data);
        
        // Check if remediation steps exist
        if (!data.remediationSteps || data.remediationSteps.length === 0) {
          console.log("No remediation steps found, generating...");
          // Auto-generate remediation steps
          generateRemediationSteps(id, true)
            .then((steps) => {
              setRemediationSteps(steps);
              // Update vulnerability object with steps
              setVulnerability({...data, remediationSteps: steps});
              setLoading(false);
            })
            .catch((err) => {
              console.error("Error generating remediation steps:", err);
              setLoading(false);
            });
        } else {
          // Check if remediation steps appear to be generic
          const isGeneric = detectGenericRemediation(data.remediationSteps);
          if (isGeneric) {
            console.log("Detected generic remediation steps, regenerating...");
            generateRemediationSteps(id, true)
              .then((steps) => {
                setRemediationSteps(steps);
                // Update vulnerability object with steps
                setVulnerability({...data, remediationSteps: steps});
                setLoading(false);
              })
              .catch((err) => {
                console.error("Error regenerating steps:", err);
                setRemediationSteps(data.remediationSteps);
                setLoading(false);
              });
          } else {
            setRemediationSteps(data.remediationSteps);
            setLoading(false);
          }
        }
      })
      .catch((err) => {
        setError("Failed to load vulnerability data: " + err.message);
        setLoading(false);
      });
  }, [id]);
  
  // Helper function to detect if remediation steps are generic
  const detectGenericRemediation = (steps) => {
    if (!steps || steps.length === 0) return true;
    
    // Check for signs of generic remediation
    return steps.some(step => 
      (step.description && step.description.includes("Review and apply patches for")) ||
      (!step.verificationSteps) ||
      (step.description && step.description.length < 50) // Very short descriptions are likely generic
    );
  };

  const handleRemediationToggle = (remediationId, isCompleted) => {
    setUpdating(true);
    toggleRemediationItem(remediationId, isCompleted)
      .then((updatedItem) => {
        // Update the local state with the updated remediation item
        setRemediationSteps(steps => 
          steps.map(step => 
            step.id === remediationId ? { ...step, isCompleted } : step
          )
        );
        setUpdating(false);
      })
      .catch((err) => {
        setError("Failed to update remediation status: " + err.message);
        setUpdating(false);
      });
  };
  const handleRegenerateSteps = () => {
    setLoading(true);
    generateRemediationSteps(id, true) // Add the true parameter to force regeneration
      .then((steps) => {
        console.log("Regenerated steps:", steps); // Debug log
        setRemediationSteps(steps);
        // Update the vulnerability object with the new steps
        setVulnerability(prev => ({...prev, remediationSteps: steps}));
        setLoading(false);
        
        // Show notification
        setNotification({
          show: true,
          message: "Remediation steps have been successfully regenerated!",
          type: "success"
        });
        
        // Auto-hide notification after 5 seconds
        setTimeout(() => {
          setNotification(prev => ({ ...prev, show: false }));
        }, 5000);
      })
      .catch((err) => {
        console.error("Error regenerating steps:", err); // Debug log
        setError("Failed to regenerate remediation steps: " + err.message);
        setLoading(false);
        
        // Show error notification
        setNotification({
          show: true,
          message: "Failed to regenerate remediation steps: " + err.message,
          type: "danger"
        });
      });
  };


  // Calculate completion percentage
  const calculateCompletionPercentage = () => {
    if (!remediationSteps || remediationSteps.length === 0) return 0;
    const completedSteps = remediationSteps.filter(step => step.isCompleted).length;
    return Math.round((completedSteps / remediationSteps.length) * 100);
  };

  const getSeverityBadgeClass = (severity) => {
    if (!severity) return "bg-secondary";
    
    switch (severity.toLowerCase()) {
      case "critical":
        return "bg-danger";
      case "high":
        return "bg-warning text-dark";
      case "medium":
        return "bg-info text-dark";
      case "low":
        return "bg-success";
      default:
        return "bg-secondary";
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return "Not available";
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  if (loading) {
    return <div className="container mt-4">Loading vulnerability data...</div>;
  }

  if (error) {
    return <div className="container mt-4 alert alert-danger">{error}</div>;
  }

  if (!vulnerability) {
    return <div className="container mt-4">Vulnerability not found</div>;
  }

  const completionPercentage = calculateCompletionPercentage();
  const allComplete = completionPercentage === 100;

  return (
    <div className="container mt-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>Vulnerability Details</h2>
        <button 
          className="btn btn-secondary" 
          onClick={() => {
            const reportId = getReportId();
            if (reportId) {
              navigate(`/report/${reportId}`);
            } else {
              // If no reportId in URL params, try to use the one from vulnerability data
              const reportIdFromVuln = vulnerability?.reportId;
              if (reportIdFromVuln) {
                navigate(`/report/${reportIdFromVuln}`);
              } else {
                // Last resort: just go back
                navigate(-1);
              }
            }
          }}
        >
          Back to Report
        </button>
      </div>

      <div className="card mb-4">
        <div className="card-header d-flex justify-content-between align-items-center">
          <h4 className="mb-0">{vulnerability.cveId}</h4>
          <span className={`badge ${getSeverityBadgeClass(vulnerability.severityLevel)}`}>
            {vulnerability.severityLevel || "Unknown"}
          </span>
        </div>
        <div className="card-body">
          <div className="row mb-3">
            <div className="col-md-3">
              <strong>CVSS Score:</strong>
            </div>
            <div className="col-md-9">
              {vulnerability.cvsScore.toFixed(1)}
            </div>
          </div>
          
          <div className="row mb-3">
            <div className="col-md-3">
              <strong>Published:</strong>
            </div>
            <div className="col-md-9">
              {formatDate(vulnerability.publishedAt)}
            </div>
          </div>
          
          <div className="row mb-3">
            <div className="col-md-3">
              <strong>Description:</strong>
            </div>
            <div className="col-md-9">
              {vulnerability.description}
            </div>
          </div>

          {vulnerability.references && (
            <div className="row mb-3">
              <div className="col-md-3">
                <strong>References:</strong>
              </div>
              <div className="col-md-9">
                {vulnerability.references.split("|").map((ref, index) => (
                  <div key={index}>
                    <a href={ref} target="_blank" rel="noopener noreferrer">{ref}</a>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="card mb-4">
        <div className="card-header d-flex justify-content-between align-items-center">
          <h4>Remediation Checklist</h4>
          <div>
            <span className={`badge ${allComplete ? 'bg-success' : 'bg-warning'}`}>
              {completionPercentage}% Complete
            </span>
          </div>
        </div>
        <div className="card-body">
          {remediationSteps.length === 0 ? (
            <div className="alert alert-info">
              No remediation steps available for this vulnerability.
            </div>
          ) : (
            <div>
              <div className="progress mb-4">
                <div 
                  className={`progress-bar ${allComplete ? 'bg-success' : 'bg-warning'}`} 
                  role="progressbar" 
                  style={{ width: `${completionPercentage}%` }} 
                  aria-valuenow={completionPercentage} 
                  aria-valuemin="0" 
                  aria-valuemax="100"
                >
                  {completionPercentage}%
                </div>
              </div>

              <ul className="list-group">
                {remediationSteps.map((step) => (
                  <li key={step.id} className="list-group-item">
                    <div className="d-flex align-items-start">
                      <div className="me-3">
                        <div className="form-check">
                          <input
                            className="form-check-input"
                            type="checkbox"
                            id={`step-${step.id}`}
                            checked={step.isCompleted}
                            onChange={(e) => handleRemediationToggle(step.id, e.target.checked)}
                            disabled={updating}
                          />
                        </div>
                      </div>
                      <div className="flex-grow-1">
                        <div className="d-flex justify-content-between">
                          <label 
                            className={`form-check-label ${step.isCompleted ? 'text-decoration-line-through text-muted' : ''}`} 
                            htmlFor={`step-${step.id}`}
                          >
                            <strong>{step.description}</strong>
                          </label>
                          <Link 
                              to={`/remediation/${step.id}?reportId=${getReportId() || vulnerability?.reportId || ''}`} 
                              className="btn btn-sm btn-outline-primary"
                            >
                            Details
                          </Link>
                        </div>
                        {step.verificationSteps && (
                          <div className="mt-2 text-muted">
                            <small><strong>Verification:</strong> {step.verificationSteps}</small>
                          </div>
                        )}
                        {step.fixedVersion && (
                          <div className="mt-1 text-muted">
                            <small><strong>Fixed in version:</strong> {step.fixedVersion}</small>
                          </div>
                        )}
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
              
              {allComplete && (
                <div className="alert alert-success mt-3">
                  <i className="bi bi-check-circle-fill me-2"></i>
                  All remediation steps completed!
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};